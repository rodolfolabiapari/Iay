#include <stdio.h>
#include <stdlib.h>
#include <png.h>

////////////////////////////////////////////////////////////////
// PNG functions
////////////////////////////////////////////////////////////////
void read_png_file(int * width, int * height,
png_byte * color_type, png_byte * bit_depth, png_bytep **row_pointers)
{
  printf("Leitura de imagem PNG\n");
  FILE *fp = fopen("lenna.png", "rb\n");

  png_structp png = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
  if(!png) abort();

  png_infop info = png_create_info_struct(png);
  if(!info) abort();

  if(setjmp(png_jmpbuf(png))) abort();

  png_init_io(png, fp);

  png_read_info(png, info);

  *width      = png_get_image_width(png, info);
  *height     = png_get_image_height(png, info);
  *color_type = png_get_color_type(png, info);
  *bit_depth  = png_get_bit_depth(png, info);

  printf("----Width:%d  Height:%d\n", *width, *height);

  // Read any color_type into 8bit depth, RGBA format.
  // See http://www.libpng.org/pub/png/libpng-manual.txt

  printf("--Vefificando informações da imagem\n");
  if(*bit_depth  == 16)
    png_set_strip_16(png);

  if(*color_type == PNG_COLOR_TYPE_PALETTE)
    png_set_palette_to_rgb(png);

  // PNG_COLOR_TYPE_GRAY_ALPHA is always 8 or 16bit depth.
  if(*color_type == PNG_COLOR_TYPE_GRAY && *bit_depth < 8)
    png_set_expand_gray_1_2_4_to_8(png);

  if(png_get_valid(png, info, PNG_INFO_tRNS))
    png_set_tRNS_to_alpha(png);

  // These color_type don't have an alpha channel then fill it with 0xff.
  if(*color_type == PNG_COLOR_TYPE_RGB  ||
     *color_type == PNG_COLOR_TYPE_GRAY ||
     *color_type == PNG_COLOR_TYPE_PALETTE)
    png_set_filler(png, 0xFF, PNG_FILLER_AFTER);

  /*if(*color_type == PNG_COLOR_TYPE_GRAY ||
     *color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
    png_set_gray_to_rgb(png);*/

  printf("--Realizando o Upgrade de informação\n");
  png_read_update_info(png, info);

  *row_pointers = (png_bytep*)malloc(sizeof(png_bytep) * * height);

  for(int y = 0; y < * height; y++) {
    (*row_pointers)[y] = (png_byte*)malloc(png_get_rowbytes(png,info));
  }

  png_read_image(png, *row_pointers);
  printf("--Dados lidos com sucesso.\n");

  fclose(fp);
}
/*
void write_png_file(char *filename, int width, int height,
png_byte color_type, png_byte bit_depth, png_bytep *row_pointers)
{
  int y;

  FILE *fp = fopen(filename, "wb\n");
  if(!fp) abort();

  png_structp png = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
  if (!png) abort();

  png_infop info = png_create_info_struct(png);
  if (!info) abort();

  if (setjmp(png_jmpbuf(png))) abort();

  png_init_io(png, fp);

  // Output is 8bit depth, RGBA format.
  png_set_IHDR(
    png,
    info,
    width, height,
    8,
    PNG_COLOR_TYPE_RGBA,
    PNG_INTERLACE_NONE,
    PNG_COMPRESSION_TYPE_DEFAULT,
    PNG_FILTER_TYPE_DEFAULT
  );
  png_write_info(png, info);

  // To remove the alpha channel for PNG_COLOR_TYPE_RGB format,
  // Use png_set_filler().
  //png_set_filler(png, 0, PNG_FILLER_AFTER);

  png_write_image(png, row_pointers);
  png_write_end(png, NULL);

  for(int y = 0; y < height; y++) {
    free(row_pointers[y]);
  }
  free(row_pointers);

  fclose(fp);
}*/



void copy_png_to_float(int height, int width, png_bytep *row_pointers,
  float *** data)
{
  printf("Copiando os dados para float\n");
  png_byte* row; int col_pos = 0, row_pos = 0;

  for (row_pos = 1; row_pos <= height; row_pos++) {
    row = row_pointers[row_pos-1];

    for (col_pos = 1; col_pos <= width; col_pos++) {

      data[1][row_pos][col_pos] = (float) row[col_pos-1];
    }
  }
}
